#parse("definitions.vm")
import org.jetbrains.research.kex.smt.${solver.toLowerCase()}.${solver}SMTConverter
import org.jetbrains.research.kex.state.*
import org.jetbrains.research.kex.state.predicate.*
import org.jetbrains.research.kex.state.term.*
import org.jetbrains.research.kex.state.transformer.memspace
import org.jetbrains.research.kex.state.transformer.*
import org.jetbrains.research.kfg.ir.Class
import org.jetbrains.research.kfg.ir.value.instruction.BinaryOpcode
import org.jetbrains.research.kfg.ir.value.instruction.CmpOpcode
import org.jetbrains.research.kex.config.kexConfig
import org.jetbrains.research.kfg.type.ClassType
import org.jetbrains.research.kfg.type.Type
import org.jetbrains.research.kfg.type.TypeFactory
import org.jetbrains.research.kfg.type.NullType
import java.util.*

val defaultAllocSize = kexConfig.getIntValue("smt", "defaultAllocationSize", 1024)

@Suppress("UNUSED_PARAMETER")
class ${solver}Converter(val tf: TypeFactory) : ${solver}SMTConverter() {
    private var types: Set< Type > = setOf()

    private fun Term.withAxioms(expr: Dynamic_, ef: $factory, ctx: ${solver}Context): Dynamic_ {
        var resultExpr = expr
        when (this.type) {
            is KexPointer -> {
                resultExpr = resultExpr.withAxiom(resultExpr ge ef.makeIntConst(0))
                val typeVar = ctx.readProperty< Int_ >(expr as Ptr_, this.memspace, "type")
                val kfgType = this.type.getKfgType(tf)
                var typeCond: Bool_? = null
                if (kfgType.isConcrete) {
                    types.filter { it.isSubtypeOf(kfgType) }.filter { it !is NullType }.forEach {
                        val tv = ef.getTypeVariable(tf, it.kexType)
                        typeCond = if (typeCond == null) (typeVar eq tv) else (typeCond!! or (typeVar eq tv))
                    }
                }
                typeCond?.apply {
                    resultExpr = resultExpr.withAxiom(this)
                }
                resultExpr = resultExpr.withAxiom(typeVar ge ef.makeIntConst(0))
                if (this.type is KexArray) {
                    val lengthVar = ctx.readProperty< Int_ >(expr, this.memspace, "length")
                    resultExpr = resultExpr
                        .withAxiom(lengthVar ge ef.makeIntConst(0))
                }
            }
            is KexByte -> {
                resultExpr = resultExpr
                        .withAxiom(expr ge ef.makeIntConst(Byte.MIN_VALUE.toInt()))
                        .withAxiom(expr le ef.makeIntConst(Byte.MAX_VALUE.toInt()))
            }
            is KexChar -> {
                resultExpr = resultExpr
                        .withAxiom(expr ge ef.makeIntConst(Char.MIN_VALUE.toInt()))
                        .withAxiom(expr le ef.makeIntConst(Char.MAX_VALUE.toInt()))
            }
            is KexShort -> {
                resultExpr = resultExpr
                        .withAxiom(expr ge ef.makeIntConst(Short.MIN_VALUE.toInt()))
                        .withAxiom(expr le ef.makeIntConst(Short.MAX_VALUE.toInt()))
            }
        }
        return resultExpr
    }

    private fun cast(type: KexType, expr: Dynamic_): Dynamic_ =
            when (type) {
                is KexLong -> Long_.forceCast(expr)
                is KexBool -> Bool_.forceCast(expr)
                is KexIntegral -> Int_.forceCast(expr)
                is KexFloat -> Float_.forceCast(expr)
                is KexDouble -> Double_.forceCast(expr)
                is KexClass -> Ptr_.forceCast(expr)
                is KexArray -> Ptr_.forceCast(expr)
                else -> unreachable { log.error("Unable to cast expr ${ expr } to ${ type }") }
            }

    private fun convertAndCast(type: KexType, expr: Dynamic_): Dynamic_ =
            when (type) {
                is KexLong -> expr.convertToLong()
                is KexBool -> Bool_.forceCast(expr)
                is KexIntegral -> expr.convertToInt()
                is KexFloat -> expr.convertToFloat()
                is KexDouble -> expr.convertToDouble()
                is KexClass -> Ptr_.forceCast(expr)
                is KexArray -> Ptr_.forceCast(expr)
                else -> unreachable { log.error("Unable to cast expr ${ expr } to ${ type }") }
            }

    fun init(types: Set< KexType >) {
        this.types = types.filter { it !is KexNull }.map { it.getKfgType(tf) }.toSet()
    }

    fun convert(ps: PredicateState, ef: $factory, ctx: ${solver}Context, extractPath: Boolean = false): Bool_ = when (ps) {
#set($states = ["Basic", "Chain", "Choice"])
#foreach($state in $states)
        is ${state}State -> convert(ps, ef, ctx, extractPath)
#end
        else -> unreachable { log.error("Unknown PS type: ${ ps }") }
    }

    fun convert(basic: BasicState, ef: $factory, ctx: ${solver}Context, extractPath: Boolean = false): Bool_ =
        basic.predicates.fold(ef.makeTrue()) { acc, predicate -> acc and convert(predicate, ef, ctx) }

    fun convert(chain: ChainState, ef: $factory, ctx: ${solver}Context, extractPath: Boolean = false): Bool_ =
        ef.makeTrue() and convert(chain.base, ef, ctx) and convert(chain.curr, ef, ctx)

    fun convert(choice: ChoiceState, ef: $factory, ctx: ${solver}Context, extractPath: Boolean = false): Bool_ {
        var res = ef.makeFalse()
        val contexts = IdentityHashMap< Bool_, ${solver}Context >()
        for (branch in choice) {
            val newCtx = ${solver}Context(ctx)
            val state = convert(branch, ef, newCtx, extractPath)

            res = res or state
            if (!extractPath) {
                val path = branch.filterByType(PredicateType.Path())
                contexts[convert(path, ef, newCtx, true)] = newCtx
            }
        }
        ctx.switchOn("choice", contexts)
        return res
    }

#set($predicates = ["ArrayInitializer", "ArrayStore", "Call", "Catch", "DefaultSwitch", "Inequality", "Equality", "FieldInitializer", "FieldStore", "NewArray", "New", "Throw"])
    fun convert(predicate: Predicate, ef: $factory, ctx: ${solver}Context): Bool_ = when (predicate) {
#foreach($predicate in $predicates)
        is ${predicate}Predicate -> convert(predicate, ef, ctx)
#end
        else -> unreachable { log.error("Unknown predicate: ${ predicate }") }
    }

    fun convert(store: ArrayInitializerPredicate, ef: $factory, ctx: ${solver}Context): Bool_ {
        val memspace = store.arrayRef.memspace
        val ptr = convert(store.arrayRef, ef, ctx) as? Ptr_ ?: unreachable { log.error("Non-ptr ref term in `store`") }
        val value = convert(store.value, ef, ctx)
        ctx.initializeMemory(ptr, value, memspace)
        return ef.makeTrue()
    }

    fun convert(store: ArrayStorePredicate, ef: $factory, ctx: ${solver}Context): Bool_ {
        val memspace = store.arrayRef.memspace
        val ptr = convert(store.arrayRef, ef, ctx) as? Ptr_ ?: unreachable { log.error("Non-ptr ref term in `store`") }
        val value = convert(store.value, ef, ctx)
        ctx.writeMemory(ptr, value, memspace)
        return ef.makeTrue()
    }

    fun convert(call: CallPredicate, ef: $factory, ctx: ${solver}Context): Bool_ = ef.makeTrue()
    fun convert(catch: CatchPredicate, ef: $factory, ctx: ${solver}Context): Bool_ = ef.makeTrue()
    fun convert(`throw`: ThrowPredicate, ef: $factory, ctx: ${solver}Context): Bool_ = ef.makeTrue()

    fun convert(defaultswitch: DefaultSwitchPredicate, ef: $factory, ctx: ${solver}Context): Bool_ {
        var res = ef.makeTrue()
        val cond = convert(defaultswitch.cond, ef, ctx) as? Int_
                        ?: unreachable { log.error("Non-integer term in switch") }
        for (case in defaultswitch.cases) {
            val case_ = convert(case, ef, ctx) as? Int_ ?: unreachable { log.error("Non-integer term in switch") }
            res = res and (cond neq case_).toBool()
        }
        return res
    }

    fun convert(equality: InequalityPredicate, ef: $factory, ctx: ${solver}Context): Bool_ {
        val lhv = convert(equality.lhv, ef, ctx)
        val rhv = convert(equality.rhv, ef, ctx)
        return lhv neq rhv
    }

    fun convert(equality: EqualityPredicate, ef: $factory, ctx: ${solver}Context): Bool_ {
        val lhv = convert(equality.lhv, ef, ctx)
        val rhv = convert(equality.rhv, ef, ctx)
        return lhv eq rhv
    }

    fun convert(store: FieldInitializerPredicate, ef: $factory, ctx: ${solver}Context): Bool_ {
        val value = convert(store.value, ef, ctx)
        val memspace = store.field.memspace
        val ptr = convert(store.field, ef, ctx) as? Ptr_ ?: unreachable { log.error("Non-ptr ref in field load") }

        val field = (store.field as FieldTerm)
        val name = field.fieldNameString
        val klass = field.klass
        ctx.initializeProperty(ptr, memspace, "${ klass }.${ name }", value)
        return ef.makeTrue()
    }

    fun convert(store: FieldStorePredicate, ef: $factory, ctx: ${solver}Context): Bool_ {
        val value = convert(store.value, ef, ctx)
        val memspace = store.field.memspace
        val ptr = convert(store.field, ef, ctx) as? Ptr_ ?: unreachable { log.error("Non-ptr ref in field load") }

        val field = (store.field as FieldTerm)
        val name = field.fieldNameString
        val klass = field.klass
        ctx.writeProperty(ptr, memspace, "${ klass }.${ name }", value)
        return ef.makeTrue()
    }

    fun convert(newarray: NewArrayPredicate, ef: $factory, ctx: ${solver}Context): Bool_ {
        val memspace = newarray.lhv.memspace
        val lhv = convert(newarray.lhv, ef, ctx) as? Ptr_ ?: unreachable { log.error("Non-ptr term in `new`") }
        val elementSize = ${factory}.getTypeSize(newarray.elementType)
        val totalSize = newarray.dimentions.fold(1) { acc: Int, term: Term ->
            acc * ((term as? ConstIntTerm)?.value ?: defaultAllocSize)
        }
        val actualLength = Int_.forceCast(convert(newarray.dimentions.fold(term { const(1) }) { acc: Term, term: Term -> term { acc * term} }, ef, ctx))
        val ptr = ctx.getLocalArray(memspace, totalSize, actualLength, elementSize)

        val typeVar = ef.getTypeVariable(tf, newarray.lhv.type)
        ctx.writeProperty(lhv, memspace, "type", typeVar)
        return lhv eq ptr
    }

    fun convert(new: NewPredicate, ef: $factory, ctx: ${solver}Context): Bool_ {
        val memspace = new.lhv.memspace
        val lhv = convert(new.lhv, ef, ctx) as? Ptr_ ?: unreachable { log.error("Non-ptr term in `new`") }
        val elementSize = ${factory}.getTypeSize(new.lhv.type)

        val typeVar = ef.getTypeVariable(tf, new.lhv.type)
        ctx.writeProperty(lhv, memspace, "type", typeVar)
        return lhv eq ctx.getLocalPtr(memspace, elementSize)
    }

#set($terms = ["Argument", "ArrayIndex", "ArrayLength", "ArrayLoad", "Binary", "Call", "Cast", "Cmp",
    "ConstBool", "ConstByte", "ConstChar", "ConstClass", "ConstDouble", "ConstFloat", "ConstInt", "ConstLong",
    "ConstShort", "ConstString", "FieldLoad", "Field", "InstanceOf", "Neg", "Null", "ReturnValue", "Value", "Undef"])
    fun convert(term: Term, ef: $factory, ctx: ${solver}Context): Dynamic_ = when (term) {
#foreach($term in $terms)
        is ${term}Term -> convert(term, ef, ctx)
#end
        else -> unreachable { log.error("Unknown term type: ${ term }") }
    }

    fun convert(argument: ArgumentTerm, ef: $factory, ctx: ${solver}Context): Dynamic_ {
        val expr = ef.getVarByTypeAndName(argument.type, argument.name)
        return argument.withAxioms(expr, ef, ctx)
    }

    fun convert(arrayindex: ArrayIndexTerm, ef: $factory, ctx: ${solver}Context): Dynamic_ {
        val arrayref = convert(arrayindex.arrayRef, ef, ctx) as? Ptr_ ?: unreachable { log.error("Non-ptr operand of array load") }
        val index = (convert(arrayindex.index, ef, ctx) as? Int_ ?: unreachable { log.error("Non-integer index of array load") }) *
            ${factory}.getTypeSize(arrayindex.type).int
        val valuePtr = Ptr_.forceCast(arrayref + index)
        return arrayindex.withAxioms(valuePtr, ef, ctx)
    }

    fun convert(arraylength: ArrayLengthTerm, ef: $factory, ctx: ${solver}Context): Dynamic_ {
        val memspace = arraylength.arrayRef.memspace
        val ptr = convert(arraylength.arrayRef, ef, ctx) as? Ptr_ ?: unreachable { log.error("Non-ptr term in `arraylength`") }

        return ctx.readProperty< Int_ >(ptr, memspace, "length")
    }

    fun convert(arrayload: ArrayLoadTerm, ef: $factory, ctx: ${solver}Context): Dynamic_ {
        val memspace = arrayload.arrayRef.memspace
        val arrayref = convert(arrayload.arrayRef, ef, ctx) as? Ptr_ ?: unreachable { log.error("Non-ptr operand of array load") }

        val ret = ctx.readMemory(arrayref, memspace, ${factory}.getTypeSize(arrayload.type))
        return cast(arrayload.type, ret)
    }

    fun convert(binary: BinaryTerm, ef: $factory, ctx: ${solver}Context): Dynamic_ {
        val lhv = convert(binary.lhv, ef, ctx)
        val rhv = convert(binary.rhv, ef, ctx)
        return when (binary.opcode) {
            is BinaryOpcode.Add -> lhv + rhv
            is BinaryOpcode.Sub -> lhv - rhv
            is BinaryOpcode.Mul -> lhv * rhv
            is BinaryOpcode.Div -> lhv / rhv
            is BinaryOpcode.Rem -> lhv % rhv
            is BinaryOpcode.Shl -> lhv shl rhv
            is BinaryOpcode.Shr -> lhv ashr rhv
            is BinaryOpcode.Ushr -> lhv shr rhv
            is BinaryOpcode.And -> lhv and rhv
            is BinaryOpcode.Or -> lhv or rhv
            is BinaryOpcode.Xor -> lhv xor rhv
        }
    }

    fun convert(call: CallTerm, ef: $factory, ctx: ${solver}Context): Dynamic_ {
        val expr = ef.getVarByTypeAndName(call.type, call.name)
        return call.withAxioms(expr, ef, ctx)
    }

    fun convert(cast: CastTerm, ef: $factory, ctx: ${solver}Context): Dynamic_ {
        val op = convert(cast.operand, ef, ctx)
        if (cast.type is KexPointer) {
            val typeVar = ctx.readProperty< Int_ >(op as Ptr_, cast.operand.memspace, "type")
            val castedTypeVar = ef.getTypeVariable(tf, cast.type)
            val subtype = ef.subtypeFunction.applyAs< Bool_ >(typeVar, castedTypeVar) or ef.subtypeFunction.applyAs< Bool_ >(castedTypeVar, typeVar)
            return cast(cast.type, op.withAxiom(subtype))
        }
        return convertAndCast(cast.type, op)
    }

#macro(cmp $opcode $default $type)
    #* @vtlvariable name="type" type="java.lang.String" *#
    #* @vtlvariable name="opcode" type="java.lang.String" *#
            is CmpOpcode.$opcode -> {
                val cases = mapOf(
                    (lhv gt rhv) to ef.makeIntConst(1),
                    (lhv eq rhv) to ef.makeIntConst(0),
                    (lhv lt rhv) to ef.makeIntConst(-1)
                )
                ef.switch(cases, ef.makeIntConst($default))
            }
#end
    fun convert(cmp: CmpTerm, ef: $factory, ctx: ${solver}Context): Dynamic_ {
        val lhv = convert(cmp.lhv, ef, ctx)
        val rhv = convert(cmp.rhv,ef, ctx)
#set($opcodes = ["Eq", "Neq", "Lt", "Gt", "Le", "Ge"])
        return when (cmp.opcode) {
#foreach($opcode in $opcodes)
            is CmpOpcode.$opcode -> lhv ${opcode.toLowerCase()} rhv
#end
#cmp("Cmp", 1, "Long_")
#cmp("Cmpg", 1, "Float_")
#cmp("Cmpl", -1, "Double_")
        }
    }

    fun convert(const: ConstBoolTerm, ef: $factory, ctx: ${solver}Context): Dynamic_ = ef.makeBoolConst(const.value)
    fun convert(const: ConstByteTerm, ef: $factory, ctx: ${solver}Context): Dynamic_ = ef.makeIntConst(const.value.toInt())
    fun convert(const: ConstCharTerm, ef: $factory, ctx: ${solver}Context): Dynamic_ = ef.makeIntConst(const.value.toInt())

    fun convert(const: ConstClassTerm, ef: $factory, ctx: ${solver}Context): Dynamic_ {
        val expr = ef.getVarByTypeAndName(const.type, const.name)
        return const.withAxioms(expr, ef, ctx)
    }

    fun convert(const: ConstDoubleTerm, ef: $factory, ctx: ${solver}Context): Dynamic_ = ef.makeDoubleConst(const.value)
    fun convert(const: ConstFloatTerm, ef: $factory, ctx: ${solver}Context): Dynamic_ = ef.makeFloatConst(const.value)
    fun convert(const: ConstIntTerm, ef: $factory, ctx: ${solver}Context): Dynamic_ = ef.makeIntConst(const.value)
    fun convert(const: ConstLongTerm, ef: $factory, ctx: ${solver}Context): Dynamic_ = ef.makeLongConst(const.value)
    fun convert(const: ConstShortTerm, ef: $factory, ctx: ${solver}Context): Dynamic_ = ef.makeIntConst(const.value.toInt())

    fun convert(const: ConstStringTerm, ef: $factory, ctx: ${solver}Context): Dynamic_ {
##        val memspace = const.memspace
##
##        val length = const.name.length
##        val actualSize = length * ${factory}.getTypeSize(KexInt)
##        val res = ctx.getLocalPtr(memspace, actualSize)
##        ctx.writeBound(res, ef.makeIntConst(actualSize), memspace)
##        return res
        val expr = ef.getVarByTypeAndName(const.type, const.name)
        return const.withAxioms(expr, ef, ctx)
    }

    fun convert(fieldload: FieldLoadTerm, ef: $factory, ctx: ${solver}Context): Dynamic_ {
        val memspace = fieldload.field.memspace
        val ptr = convert(fieldload.field, ef, ctx) as? Ptr_ ?: unreachable { log.error("Non-ptr ref in field load") }

        val field = (fieldload.field as FieldTerm)
        val name = field.fieldNameString
        val klass = field.klass
        val res = ctx.readProperty(ptr, memspace, "${ klass }.${ name }", ${factory}.getTypeSize(fieldload.type))
        return cast(fieldload.type, res)
    }

    fun convert(field: FieldTerm, ef: $factory, ctx: ${solver}Context): Dynamic_ =
        convert(field.owner, ef, ctx)

    fun convert(instanceof: InstanceOfTerm, ef: $factory, ctx: ${solver}Context): Dynamic_ {
        val memspace = instanceof.operand.memspace
        val operand = convert(instanceof.operand, ef, ctx) as? Ptr_ ?: unreachable { log.error("Non-ptr ref in field load") }

        val ptrType = ctx.readProperty< Int_ >(operand, memspace, "type")
        val checkedType = ef.getTypeVariable(tf, instanceof.checkedType)
        val isSubtype1 = ef.subtypeFunction.applyAs< Bool_ >(ptrType, checkedType)
##        val isSubtype2 = ef.subtypeFunction.applyAs< Bool_ >(checkedType, ptrType)
##        return (isSubtype1 or isSubtype2)
        return isSubtype1
    }

    fun convert(neg: NegTerm, ef: $factory, ctx: ${solver}Context): Dynamic_ {
        val operand = convert(neg.operand, ef, ctx)
        return when (operand) {
            is Bool_ -> Bool_.forceCast(!operand)
            is Int_ -> Int_.forceCast(!operand)
            is Long_ -> Long_.forceCast(!operand)
            is Float_ -> Float_.forceCast(!operand)
            is Double_ -> Double_.forceCast(!operand)
            else -> unreachable { log.error("Invalid operand of `neg`: ${ neg.operand }") }
        }
    }

    fun convert(`null`: NullTerm, ef: $factory, ctx: ${solver}Context): Dynamic_ = ef.makeNull()

    fun convert(`return`: ReturnValueTerm, ef: $factory, ctx: ${solver}Context): Dynamic_ {
        val expr = ef.getVarByTypeAndName(`return`.type, `return`.name)
        return `return`.withAxioms(expr, ef, ctx)
    }

    fun convert(value: ValueTerm, ef: $factory, ctx: ${solver}Context): Dynamic_ {
        val expr = ef.getVarByTypeAndName(value.type, value.name)
        return value.withAxioms(expr, ef, ctx)
    }

    fun convert(undef: UndefTerm, ef: $factory, ctx: ${solver}Context): Dynamic_ {
        val expr = ef.getVarByTypeAndName(undef.type, undef.name, true)
        return undef.withAxioms(expr, ef, ctx)
    }
}